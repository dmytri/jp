#!/bin/bash
# Copyright 2021 David Farrell
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
declare JP_TRACE JP_LINE JP_COL JP_BUF JP_C JP_IN JP_OUT JP_R JP_OBJ_COUNT JP_INDENT="  " JP_PRETTY

function jp.error {
  echo "Error: $1 at line $JP_LINE, column $JP_COL" >&2
  return 1
}

function jp.trace {
  [[ $JP_TRACE ]] && printf "%q\n" "$1" >&2
}

function jp.chomp {
  JP_C="${JP_BUF:0:1}"
  jp.trace "chomp:$JP_C"
  jp.drop 1
  if [[ $JP_C == [$'\n\v\f\r'] ]];then
    (( JP_COL=1 ))
    (( JP_LINE++ ))
  else
    (( JP_COL++ ))
  fi
}

function jp.drop {
  jp.trace "drop"
  JP_BUF="${JP_BUF:$1}"
}

function jp.drop_blanks {
  jp.trace "drop_blanks"
  while :;do
    if [[ "$JP_C" == [[:blank:]] ]];then
      jp.chomp
    else
      break
    fi
  done
}

function jp.drop_ws {
  jp.trace "drop_ws"
  while :;do
    if [[ "$JP_C" == [[:blank:]$'\n\r'] ]];then
      jp.chomp
    else
      break
    fi
  done
}

function jp.expect {
  jp.trace "expect:$1"
  if [[ "$JP_C" != $1 ]];then
    local msg
    printf -v msg "expected %q but found %q" "$1" "$JP_C"
    jp.error "$msg" || return
  fi
}

function jp.array {
  jp.trace "array"
  (( JP_OBJ_COUNT++ ))
  local array_name="JP$JP_OBJ_COUNT"
  local ref_name="JPR$JP_OBJ_COUNT"
  eval "declare -ga $array_name"
  eval "declare -gn $ref_name=$array_name"
  jp.chomp
  jp.drop_ws
  if [[ $JP_C != ']' ]];then
    jp.read_next || return
    eval $array_name+='("$JP_R")'
    while :;do
      [[ $JP_C != '' ]] || jp.error "unterminated array: didn't find ]" || return
      jp.drop_ws
      if [[ $JP_C == ']' ]];then
        break
      elif [[ $JP_C == ',' ]];then
        jp.chomp
        jp.drop_ws
        jp.read_next || return
        eval $array_name+='("$JP_R")'
      else
        jp.error "expected , or ] but found '$JP_C'" || return
      fi
    done
  fi
  JP_R=$ref_name
  jp.chomp
}

function jp.object {
  jp.trace "object"
  (( JP_OBJ_COUNT++ ))
  local obj_name="JP$JP_OBJ_COUNT"
  local ref_name="JPR$JP_OBJ_COUNT"
  eval "declare -gA $obj_name"
  eval "declare -gn $ref_name=$obj_name"
  jp.chomp
  jp.drop_ws
  if [[ $JP_C != '}' ]];then
    jp.expect '"' || return
    jp.string
    local k="$JP_R"
    jp.drop_ws
    jp.expect ":" || return
    jp.chomp
    jp.drop_ws
    jp.read_next || return
    eval $obj_name['$k']='$JP_R'
    while :;do
      [[ $JP_C != '' ]] || jp.error "unterminated object: didn't find }" return
      jp.drop_ws
      if [[ $JP_C == '}' ]];then
        break
      elif [[ $JP_C == ',' ]];then
        jp.chomp
        jp.drop_ws
        jp.expect '"' || return
        jp.string
        local k="$JP_R"
        jp.drop_ws
        jp.expect ":" || return
        jp.chomp
        jp.drop_ws
        jp.read_next || return
        eval $obj_name['$k']='$JP_R'
      else
        jp.error "expected , or } but found $JP_C" || return
      fi
    done
  fi
  JP_R=$ref_name
  jp.chomp
}

function jp.number {
  jp.trace "number"
  local num="$JP_C"
  local seendot=
  local seenexp=
  jp.chomp
  if [[ "$num" == '-' ]];then # negative number
    [[ "$JP_C" == [[:digit:]] ]] || jp.error "minus not followed by digit: $num$JP_C" || return
    if [[ "$JP_C" == '0' ]];then
      num="$num$JP_C"
      jp.chomp
      [[ $JP_C != [[:digit:]] ]] || jp.error "number starts with zero: $num$JP_C" || return
    fi
  elif [[ "$num" == '0' ]];then
    [[ $JP_C != [[:digit:]] ]] || jp.error "number starts with zero: $num$JP_C" || return
  fi
  while :;do
    if [[ "$JP_C" == [[:digit:]] ]];then
      num="$num$JP_C"
    elif [[ $JP_C == . ]];then
      if [[ $seendot ]]; then
        jp.error "number has too many dots in it: $num$JP_C" || return
      elif [[ $seenexp ]]; then
        jp.error "exponents cannot contain dots: $num$JP_C" || return
      else
        num="$num$JP_C"
        seendot=1
        jp.chomp
        [[ "$JP_C" == [[:digit:]] ]] || jp.error "dot not followed by digit: $num$JP_C" || return
        continue
      fi
    elif [[ $JP_C == [Ee] ]];then
      if [[ $seenexp ]]; then
        jp.error "number has too many Es in it: $num$JP_C" || return
      fi
      seenexp=1
      num="$num$JP_C"
      jp.chomp
      if [[ $JP_C == [+-] ]];then
        num="$num$JP_C"
        jp.chomp
      fi
      if [[ $JP_C != [[:digit:]] ]];then
        jp.error "a number must follow an exponent or sign: $num$JP_C" || return
      fi
      num="$num$JP_C"
    else
      JP_R=$num
      break
    fi
    jp.chomp
  done
  lastchar=${num:$(( ${#num}-1 )):1}
  [[ $lastchar != [Ee.+-] ]] || jp.error "invalid number $num ($lastchar)" || return
}

function jp.string {
  jp.trace "string"
  local str=
  while :;do
    [[ $JP_C != '' ]] || jp.error "unterminated string: didn't find \"" || return
    jp.chomp
    if [[ "$JP_C" == $'\n' ]];then
      jp.error "unescaped newline in string" || return
    elif [[ "$JP_C" == $'\t' ]];then
      jp.error "unescaped tab in string" || return
    elif [[ $JP_C == $'\\' ]];then # handle escapes
      str="$str$JP_C"
      jp.chomp
      if [[ $JP_C == u ]];then # unicode
        local esc=u
        for i in 1 2 3 4;do
          jp.chomp
          [[ $JP_C == [0-9A-Fa-f] ]] || jp.error "invalid Unicode escape sequence \\$esc$JP_C" || return
          esc+=$JP_C
        done
        $JP_C=$esc
      elif [[ $JP_C != [bfnrt\"$'\\'/] ]];then
        jp.error "invalid escape sequence in string: \\$JP_C" || return
      fi
    elif [[ $JP_C == '"' ]];then
      JP_R="\"$str\"" # prepend with s so we can quote it later
      break
    fi
    str="$str$JP_C"
  done
  jp.chomp
}

function jp.null {
  jp.trace "null"
  if [[ ${JP_BUF:0:3} == ull ]];then
    jp.drop 3
    JP_R="null"
  else
    jp.error "expected 'null' but saw '$JP_C${JP_BUF:0:3}'" || return
  fi
  jp.chomp
}

function jp.bool_true {
  jp.trace "bool_true"
  if [[ ${JP_BUF:0:3} == rue ]];then
    jp.drop 3
    JP_R="true"
  else
    jp.error "expected 'true' but saw '$JP_C${JP_BUF:0:3}'" || return
  fi
  jp.chomp
}

function jp.bool_false {
  jp.trace "bool_false"
  if [[ ${JP_BUF:0:4} == alse ]];then
    jp.drop 4
    JP_R="false"
  else
    jp.error "expected 'false' but saw '$JP_C${JP_BUF:0:4}'" || return
  fi
  jp.chomp
}

function jp.read_next {
  jp.trace "read_next:$JP_C"
  case "$JP_C" in
    [[:digit:]-]) jp.number;;
    '"') jp.string;;
    'n') jp.null;;
    't') jp.bool_true;;
    'f') jp.bool_false;;
    '[') jp.array;;
    '{') jp.object;;
    *) jp.error "expected 0-9, \", 't', 'f', '[', or '{' but got: '$JP_C'"
  esac
}

function jp.parse_json {
  jp.trace "parse_json:$1"
  JP_C=
  JP_BUF="$1"
  JP_COL=1
  JP_LINE=1
  jp.chomp
  jp.drop_ws
  jp.read_next
}

function jp.type {
  jp.trace "type:$1"
  JP_TYPEDEC=$(declare -p "$1" 2> /dev/null)
  if (( $? > 0 ));then
    JP_TYPE="scalar"
  elif [[ "$JP_TYPEDEC" == "declare --"* ]];then
    JP_TYPE="indirect-ref"
  elif [[ "$JP_TYPEDEC" == "declare -a"* ]];then
    JP_TYPE="array"
  elif [[ "$JP_TYPEDEC" == "declare -A"* ]];then
    JP_TYPE="assoc-array"
  elif [[ "$JP_TYPEDEC" == "declare -n"* ]];then
    local name=${JP_TYPEDEC#*\"}
    jp.type "${name:0:-1}"
  else
    JP_TYPE=
  fi
}

function jp.to_json {
  jp.trace "to_json:$1"
  jp.type "$1"
  jp.trace "$JP_TYPE"
  local arg="$1"
  case "$JP_TYPE" in
    'scalar') JP_OUT+=("$arg");;
    'indirect-ref') eval "JP_OUT+=(\$$arg)";;
    'array')
      JP_OUT+=('[')
      local -n arr="$arg"
      local i=0
      local len=${#arr[@]}
      while (( i < len  ));do
        jp.to_json "${arr[$i]}"
        (( i++ ))
        (( i < len )) && JP_OUT+=(',')
      done
      JP_OUT+=(']')
      ;;
    'assoc-array')
      JP_OUT+=('{')
      local -n aar="$arg"
      local i=0
      local len=${#aar[@]}
      for k in "${!aar[@]}";do
        jp.to_json "$k"
        JP_OUT+=(':')
        jp.to_json "${aar[$k]}"
        (( i++ ))
        (( i < len )) && JP_OUT+=(',')
      done
      JP_OUT+=('}')
      ;;
    *) jp.error "unknown type" || return
  esac
}

function jp.slurp_input {
  jp.trace "slurp_input"
  IFS= read -rs -d '' JP_IN
}

function jp.detect_nullbyte {
  jp.trace "detect_nullbyte"
  jp.slurp_input
  if [[ -n $JP_IN ]]; then
    printf -v err "received input: %q after null byte" "$JP_IN"
    jp.error "$err" || return
  fi
}

function jp.prettyprint {
  jp.trace "prettyprint"
  local indentchars="$1"
  local i=0
  local len=${#JP_OUT[@]}
  local indentlen=${#indentchars}
  local indent=
  local linebuf=
  while (( i < len  ));do
    local token="${JP_OUT[$i]}"
    case $token in
      [\[{]) if [[ "$linebuf" == *[^[:blank:]]* ]];then
               linebuf="$linebuf$token"
             else
               linebuf="$indent$token"
             fi
             indent="$indent$indentchars"
             if [[ "${JP_OUT[$(($i+1))]}" != [\]}] ]];then
               echo -E "$linebuf"
               linebuf="$indent"
             fi
             ;;
      [\]}]) [[ -n "$indent" ]] && indent="${indent:$indentlen}"
             if [[ "$linebuf" == *[^[:blank:]] ]];then
               if [[ "${linebuf:$((${#linebuf}-1)):1}" == [\[{] ]];then
                 linebuf="$linebuf$token"
               else
                 echo -E "$linebuf"
                 linebuf="$indent$token"
               fi
             else
               linebuf="$indent$token"
             fi
             if [[ "${JP_OUT[$(($i+1))]}" != ',' ]];then
               echo -E "$linebuf"
               linebuf="$indent"
             fi
             ;;
        ',') echo -E "$linebuf,"
             linebuf="$indent";;
        ':') linebuf="$linebuf: ";;
          *) linebuf="$linebuf$token"
    esac
    (( i++ ))
  done
  [[ "$linebuf" == *[^[:blank:]]* ]] && echo -E "$linebuf"
}

function jp.uglyprint {
  jp.trace "uglyprint"
  local i=0
  local len=${#JP_OUT[@]}
  while (( i < len  ));do
    local token="${JP_OUT[$i]}"
    echo -nE "$token"
    (( i++ ))
  done
  echo
}

function jp.pop {
  (( JP_STACKSIZE-- ))
  JP_R="${JP_STACK[$JP_STACKSIZE]}"
  JP_STACK[$JP_STACKSIZE]=
}

function jp.push {
  jp.trace "push"
  JP_STACK[$JP_STACKSIZE]="$1"
  (( JP_STACKSIZE++ ))
  return 0
}

function jp.dup {
  jp.trace "dup"
  jp.push "${JP_STACK[$(( JP_STACKSIZE-1 ))]}"
}

function jp.swap {
  jp.pop
  local temp="$JP_R"
  jp.pop
  jp.push "$temp"
  jp.push "$JP_R"
}

function jp.merge {
  jp.trace "merge"
  jp.pop
  local left="$JP_R"
  jp.type "$left"
  local lefttype="$JP_TYPE"

  local count="$JP_STACKSIZE"
  while [[ $count > 0 ]];do
  jp.pop
  case "$lefttype" in
    'scalar')
      jp.type "$JP_R"
      case "$JP_TYPE" in
        'scalar')
          jp.error "cannot merge two scalars" || return
          ;;
        'array')
          eval $left='("$left" "${'"$JP_R"'[@]}")'
          ;;
        'assoc-array')
          jp.error "cannot merge a scalar into an object" || return
          ;;
        *) jp.error "unrecognized type: '$JP_TYPE'" || return
      esac
      ;;
    'array')
      jp.type "$JP_R"
      case "$JP_TYPE" in
        'scalar')
          eval $left+='("$JP_R")'
          ;;
        'array')
          eval $left+='("${'"$JP_R"'[@]}")'
          ;;
        'assoc-array')
          eval $left+='("$JP_R")'
          ;;
        *) jp.error "unrecognized type: '$JP_TYPE'" || return
      esac
      ;;
    'assoc-array')
      jp.type "$JP_R"
      case "$JP_TYPE" in
        'scalar')
          jp.error "cannot merge a scalar into an object" || return
          ;;
        'array')
          jp.error "cannot merge an array into into an object" || return
          ;;
        'assoc-array')
          local -n right=$JP_R
          for k in "${!right[@]}";do
            eval $left['"$k"']='"${right[$k]}"'
          done
          ;;
        *) jp.error "unrecognized type: '$JP_TYPE'" || return
      esac
      ;;
    *) jp.error "unrecognized type: '$JP_TYPE'" || return
  esac
  (( count-- ))
  done
  jp.push $left
}

function jp.keys {
  jp.pop
  jp.type "$JP_R"
  if [[ "$JP_TYPE" == 'assoc-array' ]];then
    local -n left=$JP_R
    for k in "${!left[@]}";do
      jp.push "$k"
    done
  else
    jp.error "keys only works on objects, I saw a: '$JP_TYPE'" || return
  fi
}

function jp.values {
  jp.pop
  jp.type "$JP_R"
  if [[ "$JP_TYPE" == 'assoc-array' ]];then
    local -n left=$JP_R
    for k in "${!left[@]}";do
      jp.push "${left[$k]}"
    done
  else
    jp.error "values only works on objects, I saw a: '$JP_TYPE'" || return
  fi
}

function jp.pairs {
  jp.pop
  jp.type "$JP_R"
  if [[ "$JP_TYPE" == 'assoc-array' ]];then
    local -n left=$JP_R
    for k in "${!left[@]}";do
      (( JP_OBJ_COUNT++ ))
      local obj_name="JP$JP_OBJ_COUNT"
      local ref_name="JPR$JP_OBJ_COUNT"
      eval "declare -gA $obj_name"
      eval "declare -gn $ref_name=$obj_name"
      eval $obj_name['$k']='${left[$k]}'
      jp.push "$ref_name"
    done
  else
    jp.error "pairs only works on objects, I saw a: '$JP_TYPE'" || return
  fi
}

function jp.run {
  jp.trace "run"
  JP_OBJ_COUNT=0
  jp.parse_json "$JP_IN" || return
  jp.push "$JP_R"
  for arg in "$@";do
    jp.parse_json "$arg" 2>/dev/null
    if [[ $? > 0 ]];then
      JP_C=
      JP_BUF=
      eval "$arg"
      if [[ $? > 0 ]];then
        jp.error "filter failed to process '$arg'"
        return
      fi
    else
      jp.push "$JP_R"
    fi
  done
  while [[ $JP_STACKSIZE > 0 ]];do
    jp.pop
    jp.to_json "$JP_R"
    if [[ $JP_PRETTY ]];then
      jp.prettyprint "$JP_INDENT"
    else
      jp.uglyprint
    fi
    JP_OUT=()
  done
}

function jp.main {
  jp.trace "main"
  [[ -t 1 ]] && JP_PRETTY=1 # default to pretty for a tty
  while getopts ":pPti:" opt; do
    case "$opt" in
      'p') JP_PRETTY=1;;
      'P') JP_PRETTY=;;
      't') JP_TRACE=1;;
      'i') JP_INDENT="$OPTARG";;
    esac
    shift $((OPTIND-1))
  done
  jp.slurp_input
  while :;do
    jp.run "$@" || return
    jp.drop_blanks
    if [[ "$JP_C" ]];then
      jp.expect $'\n' || return
      if [[ "$JP_BUF" ]];then
        JP_IN="$JP_BUF"
        continue
      fi
    fi
    break
  done
  jp.detect_nullbyte
}
[[ "$BASH_SOURCE" == "$0" ]] && jp.main "$@"
# vim: set ft=sh:
