#!/bin/bash
# Copyright 2021 David Farrell
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
declare JP_LINE=0 JP_COL=0 JP_C JP_IN JP_OUT JP_TOKENS JP_INDENT="  " JP_PRETTY JP_SILENT JP_ATOM_LEN JP_INPUT=1

function jp.error {
  echo "Error: $1 at line $JP_LINE, column $JP_COL" >&2
  return 1
}

function jp.trace {
  # ignore non-jp functions and duplicate DEBUG signals
  if [[ "$1" == "jp."* ]] && [[ "$1" != "${FUNCNAME[1]}" ]]; then
    printf "%s\t%s\n" "$EPOCHREALTIME" "$1" >&2
  fi
}

# BEGIN PARSE FUNCTIONS
function jp.chomp {
  if (( JP_COL < "${#JP_BUF[$JP_LINE]}" ));then
    JP_C="${JP_BUF[$JP_LINE]:$JP_COL:1}"
    (( JP_COL++ ))
  elif (( JP_COL == "${#JP_BUF[$JP_LINE]}" ));then
    JP_C=$'\n'
    (( JP_COL++ ))
  else
    (( JP_LINE++ ))
    JP_C="${JP_BUF[$JP_LINE]:0:1}"
    JP_COL=1
  fi
}

function jp.drop_ws {
  while :;do
    if [[ "$JP_C" == [[:blank:]$'\n\r'] ]];then
      jp.chomp
    else
      break
    fi
  done
}

function jp.expect {
  if [[ "$JP_C" != "$1" ]];then
    local msg
    printf -v msg "expected %q but found %q" "$1" "$JP_C"
    jp.error "$msg" || return
  fi
}

function jp.array {
  JP_TOKENS+=("[")
  jp.chomp
  jp.drop_ws
  if [[ "$JP_C" != ']' ]];then
    jp.read_next || return
    while :;do
      [[ "$JP_C" != '' ]] || jp.error "unterminated array: didn't find ]" || return
      jp.drop_ws
      if [[ "$JP_C" == ']' ]];then
        break
      elif [[ "$JP_C" == ',' ]];then
        JP_TOKENS+=(",")
        jp.chomp
        jp.drop_ws
        jp.read_next || return
      else
        jp.error "expected , or ] but found '$JP_C'" || return
      fi
    done
  fi
  JP_TOKENS+=("]")
  jp.chomp
}

function jp.object {
  JP_TOKENS+=("{")
  jp.chomp
  jp.drop_ws
  if [[ "$JP_C" != '}' ]];then
    jp.expect '"' || return
    jp.string
    jp.drop_ws
    jp.expect ":" || return
    JP_TOKENS+=(":")
    jp.chomp
    jp.drop_ws
    jp.read_next || return
    while :;do
      [[ "$JP_C" != '' ]] || jp.error "unterminated object: didn't find }" return
      jp.drop_ws
      if [[ "$JP_C" == '}' ]];then
        break
      elif [[ "$JP_C" == ',' ]];then
        JP_TOKENS+=(",")
        jp.chomp
        jp.drop_ws
        jp.expect '"' || return
        jp.string
        jp.drop_ws
        jp.expect ":" || return
        JP_TOKENS+=(":")
        jp.chomp
        jp.drop_ws
        jp.read_next || return
      else
        jp.error "expected , or } but found $JP_C" || return
      fi
    done
  fi
  JP_TOKENS+=("}")
  jp.chomp
}

function jp.number {
  local num="$JP_C"
  local seendot=
  local seenexp=
  jp.chomp
  if [[ "$num" == '-' ]];then # negative number
    [[ "$JP_C" == [[:digit:]] ]] || jp.error "minus not followed by digit: $num$JP_C" || return
    if [[ "$JP_C" == '0' ]];then
      num="$num$JP_C"
      jp.chomp
      [[ "$JP_C" != [[:digit:]] ]] || jp.error "number starts with zero: $num$JP_C" || return
    fi
  elif [[ "$num" == '0' ]];then
    [[ $JP_C != [[:digit:]] ]] || jp.error "number starts with zero: $num$JP_C" || return
  fi
  while :;do
    if [[ "$JP_C" == [[:digit:]] ]];then
      num="$num$JP_C"
    elif [[ "$JP_C" == . ]];then
      if [[ "$seendot" ]]; then
        jp.error "number has too many dots in it: $num$JP_C" || return
      elif [[ "$seenexp" ]]; then
        jp.error "exponents cannot contain dots: $num$JP_C" || return
      else
        num="$num$JP_C"
        seendot=1
        jp.chomp
        [[ "$JP_C" == [[:digit:]] ]] || jp.error "dot not followed by digit: $num$JP_C" || return
        continue
      fi
    elif [[ $JP_C == [Ee] ]];then
      if [[ $seenexp ]]; then
        jp.error "number has too many Es in it: $num$JP_C" || return
      fi
      seenexp=1
      num="$num$JP_C"
      jp.chomp
      if [[ $JP_C == [+-] ]];then
        num="$num$JP_C"
        jp.chomp
      fi
      if [[ $JP_C != [[:digit:]] ]];then
        jp.error "a number must follow an exponent or sign: $num$JP_C" || return
      fi
      num="$num$JP_C"
    else
      JP_TOKENS+=("$num")
      break
    fi
    jp.chomp
  done
  lastchar=${num:$(( ${#num}-1 )):1}
  [[ "$lastchar" != [Ee.+-] ]] || jp.error "invalid number $num ($lastchar)" || return
}

function jp.string {
  local str= start_line="$JP_LINE"
  while :;do
    [[ "$JP_C" != '' ]] || jp.error "unterminated string: didn't find \"" || return
    jp.chomp
    if [[ "$JP_LINE" > "$start_line" ]];then
      jp.error "unescaped newline in string" || return
    elif [[ "$JP_C" == $'\t' ]];then
      jp.error "unescaped tab in string" || return
    elif [[ "$JP_C" == $'\\' ]];then # handle escapes
      str="$str$JP_C"
      jp.chomp
      if [[ "$JP_C" == u ]];then # unicode
        local esc="u"
        for i in 1 2 3 4;do
          jp.chomp
          [[ "$JP_C" == [0-9A-Fa-f] ]] || jp.error "invalid Unicode escape sequence \\$esc$JP_C" || return
          esc+="$JP_C"
        done
        JP_C="$esc"
      elif [[ "$JP_C" != [bfnrt\"$'\\'/] ]];then
        jp.error "invalid escape sequence in string: \\$JP_C" || return
      fi
    elif [[ "$JP_C" == '"' ]];then
      JP_TOKENS+=("\"$str\"")
      break
    fi
    str+="$JP_C"
  done
  jp.chomp
}

function jp.null {
  jp.chomp
  if [[ "$JP_C" == "u" ]];then
    jp.chomp
    if [[ "$JP_C" == "l" ]];then
      jp.chomp
      if [[ "$JP_C" == "l" ]];then
        JP_TOKENS+=("null")
        jp.chomp
        return
      fi
    fi
  fi
  jp.error "expected 'null' but saw '$JP_C'" || return
}

function jp.bool_true {
  jp.chomp
  if [[ "$JP_C" == "r" ]];then
    jp.chomp
    if [[ "$JP_C" == "u" ]];then
      jp.chomp
      if [[ "$JP_C" == "e" ]];then
        JP_TOKENS+=("true")
        jp.chomp
        return
      fi
    fi
  fi
  jp.error "expected 'true' but saw '$JP_C'" || return
}

function jp.bool_false {
  jp.chomp
  if [[ "$JP_C" == "a" ]];then
    jp.chomp
    if [[ "$JP_C" == "l" ]];then
      jp.chomp
      if [[ "$JP_C" == "s" ]];then
        jp.chomp
        if [[ "$JP_C" == "e" ]];then
          JP_TOKENS+=("false")
          jp.chomp
          return
        fi
      fi
    fi
  fi
  jp.error "expected 'false' but saw '$JP_C'" || return
}

function jp.read_next {
  case "$JP_C" in
    [[:digit:]-]) jp.number;;
    '"') jp.string;;
    'n') jp.null;;
    't') jp.bool_true;;
    'f') jp.bool_false;;
    '[') jp.array;;
    '{') jp.object;;
    *) jp.error "expected 0-9, \", 't', 'f', '[', or '{' but got: '$JP_C'"
  esac
}

function jp.parse_json {
  jp.chomp
  jp.drop_ws
  jp.read_next || return
  while [[ "$JP_C" == [[:blank:]] ]];do
    jp.chomp
  done
  [[ "$JP_C" == $'\n' ]] || jp.error "expected '\n' but found $JP_C" || return
}

function jp.detect_nullbyte {
  local buf=
  IFS= read -rd '' buf
  [[ -z "$buf" ]] || jp.error "received input after null byte" || return
}
# END PARSE FUNCTIONS

# BEGIN TRANSFORM FUNCTIONS
function jp.pop {
  (( JP_STACKSIZE-- )) || jp.error "cannot pop an empty stack" || return
  JP_OUT="${JP_STACK[$JP_STACKSIZE]}"
  JP_STACK[$JP_STACKSIZE]=
}

function jp.drop {
  jp.pop || return
  local -n tos="$JP_OUT"
  if [[ $tos =~ ^[0-9]+$ ]];then
    while (( tos-- ));do
      jp.pop || return
    done
  else
    jp.error "can only drop a positive number of items but saw '$tos'" || return
  fi
}

function jp.push {
  JP_STACK[$JP_STACKSIZE]="$1"
  (( JP_STACKSIZE++ ))
  return 0
}

function jp.dup {
  (( JP_STACKSIZE > 0 )) || jp.error "cannot dup an empty stack" || return
  jp.push "${JP_STACK[$(( JP_STACKSIZE-1 ))]}"
}

function jp.swap {
  jp.pop || return
  local temp="$JP_OUT"
  jp.pop || return
  jp.push "$temp"
  jp.push "$JP_OUT"
}

function jp.get_atom {
  local i="$1"
  local -n tos="$JP_OUT"
  if [[ "${tos[$i]}" == '{' ]];then
    local nest_count=0
    while :;do
      (( i++ ))
      if [[ "${tos[$i]}" == '{' ]];then
        (( nest_count++ ))
      elif [[ "${tos[$i]}" == '}' ]];then
        (( nest_count-- ))
        if [ $nest_count -lt 0 ];then
          (( JP_ATOM_LEN=$i-$1+1 ))
          return
        fi
      fi
    done
  elif [[ "${tos[$i]}" == '[' ]];then
    local nest_count=0
    while :;do
      (( i++ ))
      if [[ "${tos[$i]}" == '[' ]];then
        (( nest_count++ ))
      elif [[ "${tos[$i]}" == ']' ]];then
        (( nest_count-- ))
        if [ $nest_count -lt 0 ];then
          (( JP_ATOM_LEN=$i-$1+1 ))
          return
        fi
      fi
    done
  else
     JP_ATOM_LEN=1
  fi
}

function jp.keys {
  jp.pop || return
  local -n tos="$JP_OUT"
  if [[ "${tos[0]}" == '{' ]];then
    local i=1 len=$(("${#tos[@]}"-3))
    while (( i < len ));do
      (( argi++ ))
      local rv="JP_RV$argi"
      eval 'declare -ga '"$rv"='("${tos[$i]}")'
      jp.push "$rv"
      # now skip the :value
      (( i+=2 ))
      jp.get_atom "$i"
      (( i+=1+$JP_ATOM_LEN ))
    done
  else
    jp.error "keys only works on objects" || return
  fi
}

function jp.vals {
  jp.pop || return
  local -n tos="$JP_OUT"
  if [[ "${tos[0]}" == '{' ]];then
    local i=3 len=$(("${#tos[@]}"-1))
    while (( i < len ));do
      jp.get_atom "$i"
      local val="${tos[$i]}"
      (( argi++ ))
      local rv="JP_RV$argi"
      eval "declare -ga $rv=()"
      eval $rv+='("${tos[@]:$i:$JP_ATOM_LEN}")'
      jp.push "$rv"
      (( i+=3+$JP_ATOM_LEN ))
    done
  elif [[ "${tos[0]}" == '[' ]];then
    local i=1 len=$(("${#tos[@]}"-1))
    while (( i < len ));do
      jp.get_atom "$i"
      (( argi++ ))
      local rv="JP_RV$argi"
      eval "declare -ga $rv=()"
      eval $rv+='("${tos[@]:$i:$JP_ATOM_LEN}")'
      jp.push "$rv"
      (( i+=1+$JP_ATOM_LEN ))
    done
  else
    jp.error "values only works on objects/arrays" || return
  fi
}

function jp.pairs {
  jp.pop || return
  local -n tos="$JP_OUT"
  if [[ "${tos[0]}" == '{' ]];then
    local i=1 len=$(("${#tos[@]}"-3))
    while (( i < len ));do
      local k="${tos[$i]}"
      (( i+=2))
      jp.get_atom "$i"
      (( argi++ ))
      local rv="JP_RV$argi"
      eval "declare -ga $rv=()"
      eval $rv+='({ "$k" : "${tos[@]:$i:$JP_ATOM_LEN}" })'
      jp.push "$rv"
      (( i+=1+$JP_ATOM_LEN ))
    done
  else
    jp.error "pairs only works on objects" || return
  fi
}

function jp.k {
  jp.pop || return
  local -n tos="$JP_OUT"
  local k="${tos[0]}"
  [[ "$k" == '"'* ]] || jp.error "k requires a string" || return
  if (( JP_STACKSIZE > 0 ));then
    (( argi++ ))
    local rv="JP_RV$argi" rvlen=1
    eval 'declare -ga '"$rv"='("[")'
    while (( JP_STACKSIZE ));do
      jp.pop || return
      local -n tos="$JP_OUT"
      if [[ "${tos[0]}" == '{' ]];then
        # handle nested data
        local j=1 len=$(( ${#tos[@]} - 1 ))
        while (( j < len ));do
          if [[ "$k" == "${tos[$j]}" ]];then
            (( j+=2 ))
            jp.get_atom "$j"
            eval "$rv"+='("${tos[@]:$j:$JP_ATOM_LEN}" ,)'
            (( rvlen++ ))
          else
            (( j+=2 ))
            jp.get_atom "$j"
          fi
          (( j+=1+JP_ATOM_LEN ))
        done
      else
        jp.error "only objects have keys" || return
      fi
    done
    # handle empty
    if (( rvlen > 1 ));then
      eval "$rv"[-1]=']'
    else
      eval "$rv"+="(']')"
    fi
    jp.push "$rv"
  fi
}

function jp.i {
  jp.pop || return
  local -n tos="$JP_OUT"
  local i="${tos[0]}"
  [[ "$i" =~ ^[0-9]+$ ]] || jp.error "i requires an integer" || return
  if (( JP_STACKSIZE > 0 ));then
    (( argi++ ))
    local rv="JP_RV$argi" rvlen=1
    eval 'declare -ga '"$rv"='("[")'
    while (( JP_STACKSIZE ));do
      jp.pop || return
      local -n tos="$JP_OUT"
      if [[ "${tos[0]}" == '[' ]];then
        # handle nested data
        local j=1 real_i=0 len=$(( ${#tos[@]} - 1 ))
        while (( j < len ));do
          jp.get_atom "$j"
          if [ $i -eq $real_i ];then
            eval "$rv"+='(${tos[@]:$j:$JP_ATOM_LEN})'
            eval "$rv"+='(,)'
            (( rvlen++ ))
            break;
          fi
          (( real_i++ ))
          (( j+=1+$JP_ATOM_LEN ))
        done
      else
        jp.error "i only works on arrays" || return
      fi
    done
    # handle empty
    if (( rvlen > 1 ));then
      eval "$rv"[-1]=']'
    else
      eval "$rv"+="(']')"
    fi
    jp.push "$rv"
  fi
}

function jp.count {
  local count="$JP_STACKSIZE"
  while (( JP_STACKSIZE ));do
    jp.pop || return
  done
  (( argi++ ))
  local rv="JP_RV$argi"
  eval 'declare -ga '"$rv"='("$count")'
  jp.push "$rv"
}

function jp.++ {
  local -n tos="${JP_STACK}"
  local start_token="${tos:0:1}"
  if [[ "$start_token" == '"' ]];then
    jp.++_str
  elif [[ "$start_token" == '[' ]];then
    jp.++_collection "[" "]"
  elif [[ "$start_token" == '{' ]];then
    jp.++_collection "{" "}"
  else
    jp.error "++ can only concat strings, arrays or objects"
  fi
  return
}

function jp.++_str {
  local str
  while (( JP_STACKSIZE ));do
    jp.pop || return
    local -n tos="$JP_OUT"
    if [[ "${tos[0]:0:1}" == '"' ]];then
      str+="${tos[0]:1:$(("${#tos[0]}"-2))}"
    else
      jp.error "++ was expecting a '\"' but found '${tos[0]}'" || return
    fi
  done
  (( argi++ ))
  local rv="JP_RV$argi"
  eval 'declare -ga '"$rv"='("\"$str\"")'
  jp.push "$rv"
}

function jp.++_collection {
  local start="$1" end="$2"
  (( argi++ ))
  local rv="JP_RV$argi"
  eval 'declare -ga '"$rv"='("$start")'
  while (( JP_STACKSIZE ));do
    jp.pop || return
    local -n tos="$JP_OUT"
    if [[ "${tos[0]}" == "$start" ]];then
      eval 'local rvlen'='$(("${#'"$rv"'[@]}"-1))'
      local toslen=$(("${#tos[@]}"-2))
      if [[ "$toslen" > 0 ]];then
        if [[ "$rvlen" > 0 ]];then
          eval "$rv"+='("," "${tos[@]:1:$toslen}")'
        else
          eval "$rv"+='("${tos[@]:1:$toslen}")'
        fi
      fi
    else
      jp.error "++ was expecting a '$start' but found '${tos[0]}'" || return
    fi
  done
  eval "$rv"+='("$end")'
  jp.push "$rv"
}

function jp.collect {
  (( argi++ ))
  local rv="JP_RV$argi" sep=""
  eval 'declare -ga '"$rv"='("[")'
  while (( JP_STACKSIZE ));do
    jp.pop || return
    local -n tos="$JP_OUT"
    eval "$rv"+='($sep "${tos[@]}")'
    sep=','
  done
  eval "$rv"+='("]")'
  jp.push "$rv"
}

function jp._test {
  local num_op="$1" str_op="$2"
  jp.pop || return
  local -n tos="$JP_OUT"
  local operand="$tos"
  local mode
  if [ ${operand[0]:0:1} = '"' ];then
    mode="str"
  elif [[ ${tos[0]:0:1} == [[:digit:]-] ]];then
    mode="num"
  else
      jp.error "can only compare to strings/numbers but saw '$tos'" || return
  fi
  (( argi++ ))
  local rv="JP_RV$argi" rvlen=1
  eval 'declare -ga '"$rv"='("[")'
  while (( JP_STACKSIZE ));do
    jp.pop || return
    local -n tos="$JP_OUT"
    if [ "$mode" = 'str' ] && [ ${tos[0]:0:1} = '"' ];then
      if [ $tos $str_op $operand ];then
        eval "$rv"+='($tos)'
        eval "$rv"+='(,)'
        (( rvlen++ ))
      fi
    elif [ "$mode" = 'num' ] && [[ ${tos[0]:0:1} == [[:digit:]-] ]];then
      if [ $tos $num_op $operand ];then
        eval "$rv"+='($tos)'
        eval "$rv"+='(,)'
        (( rvlen++ ))
      fi
    else
      jp.error "can only filter strings and numbers but saw '$tos'" || return
    fi
  done
  # handle empty
  if (( rvlen > 1 ));then
    eval "$rv"[-1]=']'
  else
    eval "$rv"+="(']')"
  fi
  jp.push "$rv"
}

function jp.eq {
  jp._test "-eq" "="
}

function jp.ne {
  jp._test "-ne" "!="
}

function jp.gt {
  jp._test "-gt" ">"
}

function jp.ge {
  jp._test "-ge" ">"
}

function jp.lt {
  jp._test "-lt" "<"
}

function jp.le {
  jp._test "-le" "<"
}

# END TRANSFORM FUNCTIONS

# BEGIN PRINT FUNCTIONS
function jp.prettyprint {
  local -n out="$JP_OUT"
  local indentchars="$1"
  local i=0
  local len=${#out[@]}
  local indentlen=${#indentchars}
  local indent=
  local linebuf=
  while (( i < len  ));do
    local token="${out[$i]}"
    case $token in
      [\[{]) if [[ "$linebuf" == *[^[:blank:]]* ]];then
               linebuf="$linebuf$token"
             else
               linebuf="$indent$token"
             fi
             indent="$indent$indentchars"
             if [[ "${out[$(($i+1))]}" != [\]}] ]];then
               echo -E "$linebuf"
               linebuf="$indent"
             fi
             ;;
      [\]}]) [[ -n "$indent" ]] && indent="${indent:$indentlen}"
             if [[ "$linebuf" == *[^[:blank:]] ]];then
               if [[ "${linebuf:$((${#linebuf}-1)):1}" == [\[{] ]];then
                 linebuf="$linebuf$token"
               else
                 echo -E "$linebuf"
                 linebuf="$indent$token"
               fi
             else
               linebuf="$indent$token"
             fi
             if [[ "${out[$(($i+1))]}" != ',' ]];then
               echo -E "$linebuf"
               linebuf="$indent"
             fi
             ;;
        ',') echo -E "$linebuf,"
             linebuf="$indent";;
        ':') linebuf="$linebuf: ";;
          *) linebuf="$linebuf$token"
    esac
    (( i++ ))
  done
  [[ "$linebuf" == *[^[:blank:]]* ]] && echo -E "$linebuf"
}

function jp.uglyprint {
  local -n out="$JP_OUT"
  local i=0
  local len=${#out[@]}
  while (( i < len  ));do
    local token="${out[$i]}"
    echo -nE "$token"
    (( i++ ))
  done
  echo
}
# END PRINT FUNCTIONS

# BEGIN MAIN
function jp.run {
  # parse stdin
  if [ $JP_INPUT ];then
    declare -gn JP_BUF=JP_IN # set the parse buffer to stdin
    declare -a tokens=()
    declare -gn JP_TOKENS=tokens
    jp.parse_json || return
    jp.push tokens
  fi

  # process args
  local in_line="$JP_LINE" in_col="$JP_COL" # save stdin parse position
  local arg_buf=()
  declare -gn JP_BUF=arg_buf # set the parse buffer to args
  local argi=0
  for arg in "$@";do
    if [ ${arg:0:1} = '.' ];then # transformation command
      eval "jp$arg" || return
    else # json to parse
      JP_LINE=0
      JP_COL=0
      arg_buf=("$arg")
      (( argi++ ))
      local argtokens="argtokens$argi"
      eval "declare -a $argtokens=()"
      eval "declare -gn JP_TOKENS=$argtokens"
      jp.parse_json || return
      jp.push "$argtokens"
    fi
  done
  JP_LINE="$in_line" # restore the stdin parse position
  JP_COL="$in_col"

  # print
  [ $JP_SILENT ] && return 0
  while [[ $JP_STACKSIZE > 0 ]];do
    jp.pop || return
    if [[ $JP_PRETTY ]];then
      jp.prettyprint "$JP_INDENT"
    else
      jp.uglyprint
    fi
  done
  return 0
}

function jp.main {
  [[ -t 1 ]] && JP_PRETTY=1 # default to pretty for a tty
  while getopts ":npPsti:" opt; do
    case "$opt" in
      'n') JP_INPUT=;;
      'p') JP_PRETTY=1;;
      'P') JP_PRETTY=;;
      't') trap '(jp.trace "${BASH_COMMAND%% *}");' DEBUG; set -T;;
      'i') JP_INDENT="$OPTARG";;
      's') JP_SILENT=1
    esac
    shift $((OPTIND-1))
  done
  [ $JP_INPUT ] && IFS=$'\n' read -rd '' -a JP_IN
  while :;do
    jp.run "$@" || return
    (( JP_LINE+1 < "${#JP_IN[@]}" )) && continue # more lines to parse
    break
  done
  [ $JP_INPUT ] && jp.detect_nullbyte
  return 0
}
[[ "$BASH_SOURCE" == "$0" ]] && jp.main "$@"
# END MAIN
# vim: set ft=sh:
